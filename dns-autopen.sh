#!/bin/bash
#
# Copyright (C) 2015 Nicolas TANDE
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
set -e

function usage() { cat << EOUSAGE
Usage : $0 command zone
      $0 add-zone example.net
        Creates an example.net/ directory and a templated zone.db file

      $0 add-ksk example.net
        Creates a new Key Signing Key

      $0 add-zsk example.net
        Creates a new Zone Signing Key

      $0 sign-zone example.net
        Increases serial and sign zone with all available keys

      $0 reload-zone example.net
        Tells NSD to reload the zone
EOUSAGE
}

function error()
{
  echo "-- $1 --" >&2
  exit 1
}

function notice()
{
  echo "-- $1 --"
}

function banner()
{
  msg="$1 $2 $1"
  printf "%.s$1" $(seq 1 ${#msg})
  printf "\n$msg\n"
  printf "%.s$1" $(seq 1 ${#msg})
  printf "\n"
}


# Reading parameters

n=$#
if [ $n -lt 2 ]; then 
  usage
  error "Invalid parameters"
fi

command="$1"
domain="$2"

workdir="$domain"
keydir="$workdir/keys"

db_file="$workdir/$domain.db"
db_generated_file="$workdir/$domain.generated.db"
db_signed_file="$workdir/$domain.generated.signed.db"

serial_tag="_AUTOGENERATED_SERIAL_TAG_"

ldnskg="/usr/bin/ldns-keygen"
[ ! -x $ldnskg ] && error "could not find ldns-keygen, install ldnsutils"
ldnssz="/usr/bin/ldns-signzone"
[ ! -x $ldnssz ] && error "could not find ldns-signzone, install ldnsutils"
ldnskey2ds="/usr/bin/ldns-key2ds"
[ ! -x $ldnskey2ds ] && error "could not find ldnskey2ds, install ldnsutils"

nsdcontrol=/usr/sbin/nsd-control

function addzone()
{
  [ -d "$workdir" ] && error "Directory already exists"
  banner "#" "Adding zone $domain"

  notice "Creating directory $workdir"
  mkdir -p "$workdir"

  soa="$(hostname --fqdn)"
  mail="root.${domain}"
  notice "Creating template file $db_file"
  (
    echo '$ORIGIN .'
    echo ''
    echo '$TTL 7200       ; 2 hour'
    echo "${domain}. IN SOA  ${soa}. ${mail}. ("
    echo "        1;${serial_tag}; -- DO NOT EDIT SERIAL BY HAND --"
    echo '        14400   ; refresh (4 hours)'
    echo '        7200    ; retry (2 hour)'
    echo '        604800  ; expire (1 week)'
    echo '        28800   ; minimum (8 hours)'
    echo '        )'
    echo ''
    echo "	IN NS      ${soa}."
    echo ''
    echo '	IN A       127.0.0.1'
    echo '	IN AAAA    ::1'
    echo ''
    echo "\$ORIGIN ${domain}."
    echo ''
  ) > $db_file

  notice "Would you like to generate Key-Signing-Key (KSK) and Zone-Signing-Key (ZSK) ? [Y/n]"
  read choice
  if [ "$choice" = "" -o "$choice" = "Y" -o "$choice" = "y" ]; then
    addksk
    addzsk
  fi

}

function addkey()
{
  if [ ! -d "$workdir" ]; then error "Directory $workdir/ does not exists"; fi
  
  if [ ! -d "$keydir" ]; then 
    notice "Creating directory $keydir/"
    mkdir -p "$keydir"
  fi

  banner "#" "Generating $1 for zone $domain"
  key=$(${ldnskg} $2 $domain)
  keyid=$(echo "$key" | sed -e "s/K${domain}.//g")

  rm ${key}.ds
  # generate a new DS with multiple hash algorithms
  if [ "$3" = "ds" ]; then
    notice "You should declare these DS in parent's zone"
    (
      echo "; $1 ${keyid} - hash SHA1"
      $ldnskey2ds -n -1 ${key}.key
      echo "; $1 ${keyid} - hash SHA256"
      $ldnskey2ds -n -2 ${key}.key
      echo "; $1 ${keyid} - hash GOST"
      $ldnskey2ds -n -g ${key}.key
      echo "; $1 ${keyid} - hash SHA384"
      $ldnskey2ds -n -4 ${key}.key
    ) > "${key}.ds"
    cat "${key}.ds"
  fi
  
  dest="$keydir/$(date +'%Y%m%d')+$1${keyid}"
  notice "Moving key $keyid to directory $dest"

  mkdir "$dest/"
  mv "${key}.private" "$dest/"
  mv "${key}.key" "$dest/"
  if [ "$3" = "ds" ]; then
    mv "${key}.ds" "$dest/"
  fi
}

function addksk()
{
  addkey "KSK" "-k -a RSASHA512 -b 2048" "ds"
}

function addzsk()
{
  addkey "ZSK" "-a RSASHA512 -b 1024" ""
}

function sign()
{
  if [ ! -d "$workdir" ]; then error "Directory $workdir/ does not exists"; fi
  
  today=$(date +"%Y%m%d01")
  oldfile=0
  if [ -f $db_generated_file ]; then
    oldfile=$(< $db_generated_file perl -ne "print \$1 if / ([0-9]+);$serial_tag/")
  fi

  newserial=$today
  if [ $today -lt $(($oldfile + 1)) ]; then newserial=$(($oldfile + 1)); fi
  
  notice "Generating $db_generated_file with serial $newserial"
  (
    banner ";" "AUTOGENERATED FILE ; DO NOT EDIT"
    < $db_file sed -e "s/1;$serial_tag/$newserial;$serial_tag/"
    banner ";" "AUTOGENERATED FILE ; DO NOT EDIT"
  ) > $db_generated_file

  banner "#" "Signing zone $domain (expiration: 3 days)"
  ${ldnssz} -n -p -s $(head -n 1000 /dev/random | sha1sum | cut -b 1-16) $db_generated_file -f $db_signed_file -e $(date '+%Y%m%d%H%M%S' -d '+3 days') -b $(find $keydir -name \*.key | sed -s "s/\.key//g")

  notice "$db_signed_file is now ready for use by your DNS Server"

}

function reload()
{
  if [ ! -d "$workdir" ]; then error "Directory $workdir/ does not exists"; fi
  [ ! -x "$nsdcontrol" ] && error "Could not run $nsdcontrol, check setup"
  banner "#" "Reloading zone $domain (file $db_generated_file)"

  $nsdcontrol reload $domain
}

case $command in 
  "add-zone")
	addzone
	;;
  "add-ksk")
	addksk
	;;
  "add-zsk")
	addzsk
	;;
  "sign-zone")
	sign
	;;
  "reload-zone")
	reload
	;;
  *)
  	usage
	error "invalid command: $command"
	;;
esac

